STATEMENTS   : NEWLINE* statement (NEWLINE* statement)* NEWLINE
------------------------------------------------------------------------------
STATEMENT    : KEY:RETURN expression?
             : KEY:SKIP
             : KEY:STOP
             : expression
------------------------------------------------------------------------------
EXPRESSION   : (KEY:GLOBAL)? KEY:ITEM IDENTIFIER COLON expr
             : arith-expr ((KEY:AND|KEY:OR) arith-expr)*
------------------------------------------------------------------------------
COMP-EXPR    : KEY:INVERT  comp-expr
             : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*
------------------------------------------------------------------------------
ARITH-EXPR   : term ((PLUS|MINUS) term)*
------------------------------------------------------------------------------
TERM         : factor ((MUL|DIV|MOD) factor)*
------------------------------------------------------------------------------
FACTOR       : (PLUS|MINUS) factor
             : power
------------------------------------------------------------------------------
POWER        : in-expr (POW factor)*
------------------------------------------------------------------------------
IN-EXPR      : object-call (KEY:IN object-call)?
------------------------------------------------------------------------------
OBJECT-CALL  : call (DOT object-call)?
------------------------------------------------------------------------------
CALL         : atom (LPAREN (expression (COMMA expression)*)? RPAREN)?
------------------------------------------------------------------------------
ATOM         : INT|FLOAT|STRING|IDENTIFIER
             : LPAREN EXPRESSION RPAREN
             : LIST-EXPR
             : DICT-EXPR
             : IF-EXPR
             : COUNT-EXPR
             : WHILE-EXPR
             : TRY-EXPR
             : FUNC-DEF
             : OBJECT-DEF
             : INCLUDE-EXPR
------------------------------------------------------------------------------
LIST-EXPR    : LSQUARE (expression (COMMA expression)*) RSQUARE
------------------------------------------------------------------------------
DICT-EXPR    : LCURLY (expression COLON expression-
               (COMMA expression COLON expression)*) RCURLY
------------------------------------------------------------------------------
IF-EXPR      : KEY:IF expression KEY:DO
              (statement (KEY:ELSE (KEY:IF expression)? KEY:DO statement)?)
              | (NEWLINE statements KEY:END|(KEY:ELSE (KEY:IF expression)?-
                KEY:DO NEWLINE statements KEY:END)*)
------------------------------------------------------------------------------
COUNT-EXPR   : KEY:COUNT KEY:FROM expression KEY:AS IDENTIFIER
               KEY:TO expression (KEY:STEP expression)?
               KEY:DO statement | (NEWLINE expression KEY:END)*
------------------------------------------------------------------------------
WHILE-EXPR   : KEY:WHILE expression KEY:DO statement
              | (NEWLINE expression KEY:END)*
------------------------------------------------------------------------------
TRY-EXPR     : KEY:TRY KEY:DO statement
              | (NEWLINE expression KEY:END)*
              | (KEY:ERROR STRING:ERROR-TAG? (KEY:AS IDENTIFIER)? -
                KEY:DO expression | NEWLINE expression KEY:END)*
------------------------------------------------------------------------------
FUNC-DEF     : KEY:FUNCTION IDENTIFIER?
               (KEY:WITH IDENTIFIER (COMMA IDENTIFIER)*)?
               KEY:DO expression | (NEWLINE expression KEY:END)*
------------------------------------------------------------------------------
OBJECT-DEF   : KEY:OBJECT IDENTIFIER
               (KEY:WITH IDENTIFIER (COMMA IDENTIFIER)*)?
               KEY: DO expression | (NEWLINE expression KEY:END)*
------------------------------------------------------------------------------
INCLUDE-EXPR : KEY:INCLUDE STRING:FILE (AS IDENTIFIER)?
------------------------------------------------------------------------------
* 0 or more of given object
? optional
| or