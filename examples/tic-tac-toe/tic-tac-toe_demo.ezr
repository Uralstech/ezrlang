@ A demo for the ezr programming language
@ https://github.com/Uralstech/ezrlang

@ Main game matrix
item game: [['-', '-', '-'],
            ['-', '-', '-'],
            ['-', '-', '-']]

@ Winning cases
item wins: [[['n', 'n', 'n'],
             ['-', '-', '-'],
             ['-', '-', '-']],
            [['-', '-', '-'],
             ['n', 'n', 'n'],
             ['-', '-', '-']],
            [['-', '-', '-'],
             ['-', '-', '-'],
             ['n', 'n', 'n']],
            [['n', '-', '-'],
             ['n', '-', '-'],
             ['n', '-', '-']],
            [['-', 'n', '-'],
             ['-', 'n', '-'],
             ['-', 'n', '-']],
            [['-', '-', 'n'],
             ['-', '-', 'n'],
             ['-', '-', 'n']],
            [['-', '-', 'n'],
             ['-', 'n', '-'],
             ['n', '-', '-']],
            [['n', '-', '-'],
             ['-', 'n', '-'],
             ['-', '-', 'n']]]

@ Function to show game matrix in more readable form
function SHOW_GAME do
    count from 0 as i to length_of(game) do
        item s: ''
        count from 0 as j to length_of(game <= i) do item s: s + (game <= i <= j) + ' '
        
        show(s)
    end
end

@ Function for checking if the game is over, and who has won
function Check_result do
    item full: true
    count from 0 as i to length_of(wins) do
        item x_pts: 0
        item o_pts: 0
        count from 0 as j to length_of(game) do
            count from 0 as k to length_of(game <= j) do
                if wins <= i <= j <= k = 'n' do
                    if game <= j <= k = 'x' do item x_pts: x_pts + 1
                    if game <= j <= k = 'o' do item o_pts: o_pts + 1
                end

                if game <= j <= k = '-' do item full: false
            end

            if x_pts >= 3 do
                return 'x'
            else if o_pts >= 3 do
                return 'o'
            end
        end
    end

    return convert(convert(full, 'INT'), 'STRING')
end

@ Function to register the players' current move
function Move with position, char do
    item y: if position <= 3 do 0 else if position <= 6 do 1 else if position <= 9 do 2 else do -1
    item x: if position <= 3 do position - 1 else if position <= 6 do position - 4 else if position <= 9 do position - 7 else do -1
    if (y < 0 or x < 0) or position <= 0 do return 'INVALID POSITION'
    if game <= y <= x ! '-' do return 'INVALID POSITION'

    return replace(game, y, replace(game <= y, x, char))
end

@ Showing the matrix
show('\n')
SHOW_GAME()

@ Main gameloop
item char: 'x'
while true do
    item move: get_int('Enter position (' + char + ') ')
    item move: Move(move, char)
    if type_of(move) = 'String' do
        show(move)
        skip
    else do
        item game: move
    end

    show('\n')
    SHOW_GAME()

    item result: Check_result()
    if result = '1' do
        show('Draw!')
        stop
    else if result = 'x' do
        show('X has won!')
        stop
    else if result = 'o' do
        show('O has won!')
        stop
    end

    item char: if char = 'x' do 'o' else do 'x'
end